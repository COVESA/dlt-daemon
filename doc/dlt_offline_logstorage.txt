DLT Offline Logstorage
======================
Christoph Lipka <clipka@jp.adit-jv.com>
0.0.2, 2016/10/19 Updated Version

Overview
--------
DLT is a reusable open source software component for standardized logging and tracing in infotainment ECUs based on the AUTOSAR 4.0 standard.
The goal of DLT is the consolidation of the existing variety of logging and tracing protocols on one format.


Introduction to DLT Offline Logstorage
--------------------------------------
Logstorage is a mechanism to store DLT logs on the target system or an external device (e.g. USB stick) connected to the target.
It can be seen as an improvement of the Offline Trace functionality which is already part of DLT.

Logstorage provides the following features:
    - Store logs in sets of log files defined by configuration files
    - Log file content is configurable
        - Configurable options are:
            - Application identifier (single entry, list, wildcard)
            - Context identifier (single entry, list, wildcard)
            - Log level
            - ECU identifier
    - Log files are configurable in terms of:
        - File name and naming scheme
        - File size
        - Number of files
    - Log message synchronization strategy is configurable
    - Trigger start and stop logging using a control application
    - Integration into Udev device management


Filter configuration
--------------------
For DLT daemon to store logs the configuration file named “dlt_logstorage.conf” should be present in external storage or internal storage device.
The format is defined as follows:
----
[Filter<unique number>]           # filter configration name
LogAppName=<APID>                 # Name of application to store logs from. Multiple applications can be separated by "," and ".*" denotes all applications
ContextName=<CTID>                # Name or names of contexts to store logs from. Multiple contexts can be separated by "," and ".*" denotes all contexts of the application
LogLevel=<Log level>              # Define log level, e.g. DLT_LOG_INFO or DLT_LOG_FATAL
File=<file name>                  # Base name of the created files that containing the logs, e.g. "example". For further file naming scheme configurations see man dlt.conf
FileSize=<file size in bytes>     # Maximum file size in bytes
NOFiles=<number of files>         # Number of created files before oldest is deleted and a new one is created
SyncBehavior=<strategy>           # Specify sync strategy. Default: Sync'ed after every message. See Logstorage Rinbuffer Implementation below.
EcuID=<ECUid>                     # Specify ECU identifier
SpecificSize=<spec size in bytes> # Store logs in storage devices after specific size is reached.

----
The Parameter "SyncBehavior","EcuID" and "SpecificSize" are optional - all others are mandatory.
*Note*: Not allowed is the combination of wildcards for LogAppName *and* ContextName. The Parameter "SyncBehavior","EcuID" and "SpecificSize" are optional - all others are mandatory. +

An configuration file should look like: +

----
[FILTER1]
LogAppName=APP1
ContextName=CON1,CON2
LogLevel=DLT_LOG_INFO
File=App
FileSize=10000
NOFiles=10

[FILTER2]
LogAppName=TEST
ContextName=.*
LogLevel=DLT_LOG_ERROR
File=Test
FileSize=250000
NOFiles=5
EcuID=ECU1
SyncBehavior=ON_SPECIFIC_SIZE
SpecificSize=5000

[FILTER3]
LogAppName=TEST
ContextName=.*
LogLevel=DLT_LOG_ERROR
File=Test
FileSize=250000
NOFiles=5
SyncBehavior=ON_FILE_SIZE,ON_DEMAND
EcuID=ECU1

----

Filter algorithm
----------------
To filter a log message based on information given in the filter configuration a hash table is used. Keys of hash table consist of a combination of application ID and context ID. Since DLT Offline Logstorage supports wildcards and lists of IDs, the following cases have to be considered: +
Filter configuration contains +

. One application ID (App1) and one context ID (Ctx1): Key = "App1:Ctx1"
. One application ID (App1), wildcard for context ID: Key = "App1"
. Wildcard of application ID, One context ID (Ctx1): Key = "Ctx1"
. Wildcard of application ID, list of context IDs (Ctx1,Ctx2): Keys="Ctx1","Ctx2" and the other way around
. List of application (App1, App2) and context IDs (Ctx1, Ctx2): all combinations of application ID and context ID are possible. Keys = "App1:Ctx1", "App1:Ctx2", "App2:Ctx1", "App2,Ctx2"
. Both wildcards for application ID and context ID is not allowed.

Data of a key value pair contains of all information given in OfflineLogstorageConsumerInfoTable apart from application ID and context ID.
When a message arrives at the filter, three checks have to be done. It has to be checked if:

. The combination of application and context ID is a valid key
. The application ID is a valid key
. The context ID is a valid key

If one or more keys are valid the message is stored in the file of the corresponding filter if the log level is lesser than specified (FATAL < ... < INFO < ...).
If not, the incoming message will be ignored.

Using DLT Offline Logstorage
----------------------------
Enable OfflineLogstorage by setting OfflineLogstorageMaxDevices = 1 in dlt.conf.
Be aware that the performance of DLT may drop if multiple Logstorage devices are used; the performance depends on the write speed of the used device, too.

Create the device folder: +

----
mkdir -p /var/dltlogs
----

Create the configuration file and store it on into that folder or mount an external device containing a configuration file.

Start the DLT Daemon. This is not necessary if the DLT Daemon was started already with Offline Logstorage enabled.

Trigger DLT Daemon to use the new logstorage device: +

----
dlt-logstorage-ctrl -c 1 -p /var/dltlogs
----

Afterwards, logs that match the filter configuration are stored onto the Logstorage device.

----
dlt-logstorage-ctrl -c 0 -p /var/dltlogs
----

Afterwards the configured logstorage device is disconnected from the DLT Daemon.

Using dlt-logstorage-ctrl application
-------------------------------------

----
Usage: dlt-logstorage-ctrl [options]
Send a trigger to DLT daemon to connect/disconnect a certain logstorage device

Options:
  -c         Connection type: connect = 1, disconnect = 0
  -d[prop]   Run as daemon: prop = use proprietary handler
             'prop' may be replaced by any meaningful word
  -e         Set ECU ID (Default: ECU1)
  -h         Usage
  -p         Mount point path
  -t         Specify connection timeout (Default: 10s)
  -v         Set verbose flag (Default:0)
----

Testing DLT Offline Logstorage
------------------------------
The following procedure can be used to test Offline Logstorage:

. Enable OfflineLogstorage by setting OfflineLogstorageMaxDevices = 1 in dlt.conf

. Start dlt-daemon

. The default search path of logstorage is: /tmp/dltlogs/dltlogsdevX
  where X is a number in the range [1..OfflineLogstorageMaxDevices]

. Create the device folder

  $ mkdir -p /var/dltlog

. Create the configuration file "dlt_logstorage.conf" in this folder
  and define filter configuration(s):

  $printf "[FILTER1]
  LogAppName=LOG
  ContextName=TEST
  LogLevel=DLT_LOG_WARN
  File=example
  FileSize=50000
  NOFiles=5" > /tmp/dltlogs/dltlogsdev1/dlt_logstorage.conf

. Trigger dlt-daemon to use a new device

  $ dlt-logstorage-ctrl -c 1 -p /var/dltlog

. Start dlt-example-user

  $ dlt-example-user Hello123

. After execution, a log file is created in /var/dltlogs
  e.g. example_001_20150512_133344.dlt

. To check the content of the file open it with dlt-convert or DLT Viewer.

Logstorage Ring Buffer Implementation
-------------------------------------
The DLT Logstorage is mainly used to store a configurable set of logs on an external mass storage device attached to the target.
In this scenario, writing each incoming log message directly onto the external storage device is appreciate, because the storage device might be un-mounted/suddenly removed at any time.
Writing each log message immediately avoids the problem of losing too many messages because the file system sync could not be finished before the device has been removed physically from the target.
On the other hand the DLT Logstorage feature might be used as well to store a configurable set of logs on any internal, nonvolatile memory (e.g. FLASH storage device).
Due to the reason of limited write cycles of a FLASH device the number of write cycles has to be reduced as much as possible.
But the drawback of losing log messages in case of an unexpected operating system crash has to be taking into account as well.
The obvious idea is to cache incoming log messages in memory and write the log data to disk based on a certain strategy.
Incoming log messages are stored in a data cache with a specific size. Depending on user defined strategy, the data cache is written onto the storage device、without relying on the sync mechanism of the file system.

The following strategies are implemented:
. ON_MSG - sync every message(Default)
. ON_DAEMON_EXIT - sync on daemon exit
. ON_DEMAND - sync on demand
. ON_FILE_SIZE - sync on file size reached
. ON_SPECIFIC_SIZE - sync after specific size is reached
  Note : 1.Combinations (not allowed: combinations with ON_MSG,combination of ON_FILE_SIZE with ON_SPECIFIC_SIZE)
         2.If on_demand sync strategy alone is specified, it is advised to concatenate the log files in sequential order before viewing it on viewer.
